use std;

effect Yield {
   yield(String) ()
}

effect Logic {
    branch() Bool
    fail() a
}

let hYield = handler {
    return(x) { "" }
    yield(m) { concat(concat(m, "\n"), resume(())) }
};

let hLogic = handler {
    return(x) { () }
    branch() { resume(true); resume(false) }
    fail() { () }
};

let show_bools = fn(a, b, c) {
    let a = concat(show_bool(a), ", ");
    let b = concat(show_bool(b), ", ");
    concat(concat(a, b), show_bool(c))
};

let assert = fn(a, b, c) {
    if and(not(a), b) {
        yield(show_bools(a, b, c))
    } else {
        fail()
    }
};

effect Once! {
    once!(a) a
}

let eOnce = elaboration Once! -> <Yield,Logic> {
    once!(c) {
        let hYieldOnce = handler {
            return(x) { "" }
            yield(m) { m }
        };
        yield(handle[hYieldOnce] handle[hLogic] c)
    }
};

let main = handle[hYield] handle[hLogic] elab[eOnce] {
    once!(assert(branch(), branch(), branch()))
};
